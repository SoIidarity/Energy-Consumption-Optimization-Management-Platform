# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.feature_geometry import FeatureGeometry  # noqa: F401,E501
from swagger_server import util


class Feature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, properties: object=None, geometry: FeatureGeometry=None):  # noqa: E501
        """Feature - a model defined in Swagger

        :param type: The type of this Feature.  # noqa: E501
        :type type: str
        :param properties: The properties of this Feature.  # noqa: E501
        :type properties: object
        :param geometry: The geometry of this Feature.  # noqa: E501
        :type geometry: FeatureGeometry
        """
        self.swagger_types = {
            'type': str,
            'properties': object,
            'geometry': FeatureGeometry
        }

        self.attribute_map = {
            'type': 'type',
            'properties': 'properties',
            'geometry': 'geometry'
        }

        self._type = type
        self._properties = properties
        self._geometry = geometry

    @classmethod
    def from_dict(cls, dikt) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Feature of this Feature.  # noqa: E501
        :rtype: Feature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Feature.


        :return: The type of this Feature.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Feature.


        :param type: The type of this Feature.
        :type type: str
        """

        self._type = type

    @property
    def properties(self) -> object:
        """Gets the properties of this Feature.


        :return: The properties of this Feature.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties: object):
        """Sets the properties of this Feature.


        :param properties: The properties of this Feature.
        :type properties: object
        """

        self._properties = properties

    @property
    def geometry(self) -> FeatureGeometry:
        """Gets the geometry of this Feature.


        :return: The geometry of this Feature.
        :rtype: FeatureGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry: FeatureGeometry):
        """Sets the geometry of this Feature.


        :param geometry: The geometry of this Feature.
        :type geometry: FeatureGeometry
        """

        self._geometry = geometry
